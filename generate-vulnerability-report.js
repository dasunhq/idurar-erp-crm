/**
 * SonarQube Vulnerability Report Generator
 * 
 * This script extracts vulnerability data from SonarQube's API using the project URL
 * found in the .scannerwork/report-task.txt file and generates an HTML report.
 */

const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');

// Configuration
const SONAR_TOKEN = 'squ_7e9d90931bb669787cb5eb062b99557aca25e10a'; // Your SonarQube token
const REPORT_PATH = path.join(__dirname, 'sonarqube-vulnerability-report.html');
const REPORT_TASK_PATH = path.join(__dirname, '.scannerwork', 'report-task.txt');

// Read report-task.txt to get project information
function readReportTaskFile() {
  try {
    const reportTaskContent = fs.readFileSync(REPORT_TASK_PATH, 'utf8');
    const lines = reportTaskContent.split('\n');
    const config = {};
    
    lines.forEach(line => {
      const parts = line.split('=');
      if (parts.length === 2) {
        config[parts[0]] = parts[1];
      }
    });
    
    return config;
  } catch (error) {
    console.error(`Error reading report-task.txt: ${error.message}`);
    process.exit(1);
  }
}

// Make HTTP request to SonarQube API
function makeRequest(url, options) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;
    
    const req = protocol.request(url, options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        if (res.statusCode >= 200 && res.statusCode < 300) {
          try {
            const parsedData = JSON.parse(data);
            resolve(parsedData);
          } catch (e) {
            reject(new Error(`Failed to parse response: ${e.message}`));
          }
        } else {
          reject(new Error(`Request failed with status code: ${res.statusCode}, body: ${data}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(error);
    });
    
    req.end();
  });
}

// Fetch vulnerabilities from SonarQube API
async function fetchVulnerabilities(serverUrl, projectKey) {
  const authToken = Buffer.from(`${SONAR_TOKEN}:`).toString('base64');
  
  const issuesUrl = `${serverUrl}/api/issues/search?componentKeys=${projectKey}&types=VULNERABILITY&ps=500`;
  const hotspotsUrl = `${serverUrl}/api/hotspots/search?projectKey=${projectKey}&ps=500`;
  
  try {
    const options = {
      headers: {
        'Authorization': `Basic ${authToken}`
      }
    };
    
    const [issuesData, hotspotsData] = await Promise.all([
      makeRequest(issuesUrl, options),
      makeRequest(hotspotsUrl, options)
    ]);
    
    return { issues: issuesData.issues || [], hotspots: hotspotsData.hotspots || [] };
  } catch (error) {
    console.error(`Error fetching vulnerabilities: ${error.message}`);
    return { issues: [], hotspots: [] };
  }
}

// Fetch rule details to get descriptions
async function fetchRuleDetails(serverUrl, ruleKeys) {
  const authToken = Buffer.from(`${SONAR_TOKEN}:`).toString('base64');
  const uniqueRuleKeys = [...new Set(ruleKeys)];
  
  try {
    const options = {
      headers: {
        'Authorization': `Basic ${authToken}`
      }
    };
    
    const rulesData = {};
    
    for (const ruleKey of uniqueRuleKeys) {
      const ruleUrl = `${serverUrl}/api/rules/show?key=${ruleKey}`;
      try {
        const ruleData = await makeRequest(ruleUrl, options);
        rulesData[ruleKey] = ruleData.rule;
      } catch (error) {
        console.error(`Error fetching rule ${ruleKey}: ${error.message}`);
      }
    }
    
    return rulesData;
  } catch (error) {
    console.error(`Error fetching rule details: ${error.message}`);
    return {};
  }
}

// Generate HTML report
function generateHtmlReport(vulnerabilities, rules, projectKey, dashboardUrl) {
  const { issues, hotspots } = vulnerabilities;
  
  // Count vulnerabilities by severity
  const severityCounts = {
    'BLOCKER': 0,
    'CRITICAL': 0,
    'MAJOR': 0,
    'MINOR': 0,
    'INFO': 0
  };
  
  issues.forEach(issue => {
    if (severityCounts[issue.severity] !== undefined) {
      severityCounts[issue.severity]++;
    }
  });
  
  // Count security hotspots by vulnerability probability
  const hotspotCounts = {
    'HIGH': 0,
    'MEDIUM': 0,
    'LOW': 0
  };
  
  hotspots.forEach(hotspot => {
    if (hotspotCounts[hotspot.vulnerabilityProbability] !== undefined) {
      hotspotCounts[hotspot.vulnerabilityProbability]++;
    }
  });
  
  // Generate HTML content
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SonarQube Vulnerability Report - ${projectKey}</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    header {
      background-color: #0b7285;
      color: white;
      padding: 20px;
      border-radius: 5px;
      margin-bottom: 30px;
    }
    h1 {
      margin: 0;
    }
    .summary-box {
      display: flex;
      justify-content: space-between;
      margin-bottom: 30px;
    }
    .summary-card {
      background-color: #f8f8f8;
      border-radius: 5px;
      padding: 15px;
      flex: 1;
      margin-right: 15px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .summary-card:last-child {
      margin-right: 0;
    }
    .severity-indicator {
      display: inline-block;
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 5px;
    }
    .severity-BLOCKER { background-color: #d42a2a; }
    .severity-CRITICAL { background-color: #e74c3c; }
    .severity-MAJOR { background-color: #f39c12; }
    .severity-MINOR { background-color: #3498db; }
    .severity-INFO { background-color: #7f8c8d; }
    
    .hotspot-HIGH { background-color: #e74c3c; }
    .hotspot-MEDIUM { background-color: #f39c12; }
    .hotspot-LOW { background-color: #3498db; }
    
    .issue-table {
      width: 100%;
      border-collapse: collapse;
      margin-bottom: 30px;
    }
    .issue-table th, .issue-table td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: left;
    }
    .issue-table th {
      background-color: #f2f2f2;
    }
    .issue-table tr:hover {
      background-color: #f5f5f5;
    }
    .tabs {
      display: flex;
      margin-bottom: 20px;
    }
    .tab {
      padding: 10px 20px;
      cursor: pointer;
      background-color: #f2f2f2;
      border: 1px solid #ddd;
      border-bottom: none;
      border-radius: 5px 5px 0 0;
      margin-right: 5px;
    }
    .tab.active {
      background-color: #0b7285;
      color: white;
    }
    .tab-content {
      display: none;
      border: 1px solid #ddd;
      padding: 20px;
      border-radius: 0 5px 5px 5px;
    }
    .tab-content.active {
      display: block;
    }
    .code-snippet {
      background-color: #f8f8f8;
      border: 1px solid #ddd;
      border-radius: 3px;
      padding: 10px;
      font-family: monospace;
      white-space: pre-wrap;
      margin: 10px 0;
    }
    .footer {
      margin-top: 30px;
      text-align: center;
      color: #666;
      font-size: 0.9em;
    }
  </style>
</head>
<body>
  <header>
    <h1>SonarQube Vulnerability Report</h1>
    <p>Project: ${projectKey} | Generated: ${new Date().toLocaleString()}</p>
    <p><a href="${dashboardUrl}" style="color: white;">View in SonarQube Dashboard</a></p>
  </header>
  
  <section class="summary">
    <h2>Vulnerability Summary</h2>
    <div class="summary-box">
      <div class="summary-card">
        <h3>Issues by Severity</h3>
        <ul>
          <li><span class="severity-indicator severity-BLOCKER"></span>Blocker: ${severityCounts.BLOCKER}</li>
          <li><span class="severity-indicator severity-CRITICAL"></span>Critical: ${severityCounts.CRITICAL}</li>
          <li><span class="severity-indicator severity-MAJOR"></span>Major: ${severityCounts.MAJOR}</li>
          <li><span class="severity-indicator severity-MINOR"></span>Minor: ${severityCounts.MINOR}</li>
          <li><span class="severity-indicator severity-INFO"></span>Info: ${severityCounts.INFO}</li>
        </ul>
        <p><strong>Total Issues: ${issues.length}</strong></p>
      </div>
      
      <div class="summary-card">
        <h3>Security Hotspots by Probability</h3>
        <ul>
          <li><span class="severity-indicator hotspot-HIGH"></span>High: ${hotspotCounts.HIGH}</li>
          <li><span class="severity-indicator hotspot-MEDIUM"></span>Medium: ${hotspotCounts.MEDIUM}</li>
          <li><span class="severity-indicator hotspot-LOW"></span>Low: ${hotspotCounts.LOW}</li>
        </ul>
        <p><strong>Total Security Hotspots: ${hotspots.length}</strong></p>
      </div>
    </div>
  </section>
  
  <div class="tabs">
    <div class="tab active" data-tab="vulnerabilities">Vulnerabilities</div>
    <div class="tab" data-tab="hotspots">Security Hotspots</div>
  </div>
  
  <div id="vulnerabilities" class="tab-content active">
    <h2>Vulnerabilities (${issues.length})</h2>
    ${issues.length > 0 ? `
    <table class="issue-table">
      <thead>
        <tr>
          <th>Severity</th>
          <th>Rule</th>
          <th>Component</th>
          <th>Line</th>
          <th>Message</th>
        </tr>
      </thead>
      <tbody>
        ${issues.map(issue => {
          const rule = rules[issue.rule] || {};
          return `
          <tr>
            <td><span class="severity-indicator severity-${issue.severity}"></span>${issue.severity}</td>
            <td>${issue.rule}</td>
            <td>${issue.component.split(':')[1]}</td>
            <td>${issue.line || 'N/A'}</td>
            <td>
              ${issue.message}
              ${rule.htmlDesc ? `
              <details>
                <summary>Rule Description</summary>
                <div>${rule.htmlDesc}</div>
              </details>
              ` : ''}
            </td>
          </tr>
          `;
        }).join('')}
      </tbody>
    </table>
    ` : '<p>No vulnerabilities found.</p>'}
  </div>
  
  <div id="hotspots" class="tab-content">
    <h2>Security Hotspots (${hotspots.length})</h2>
    ${hotspots.length > 0 ? `
    <table class="issue-table">
      <thead>
        <tr>
          <th>Probability</th>
          <th>Rule</th>
          <th>Component</th>
          <th>Line</th>
          <th>Message</th>
        </tr>
      </thead>
      <tbody>
        ${hotspots.map(hotspot => {
          const rule = rules[hotspot.ruleKey] || {};
          return `
          <tr>
            <td><span class="severity-indicator hotspot-${hotspot.vulnerabilityProbability}"></span>${hotspot.vulnerabilityProbability}</td>
            <td>${hotspot.ruleKey}</td>
            <td>${hotspot.component.split(':')[1]}</td>
            <td>${hotspot.line || 'N/A'}</td>
            <td>
              ${hotspot.message || 'N/A'}
              ${rule.htmlDesc ? `
              <details>
                <summary>Rule Description</summary>
                <div>${rule.htmlDesc}</div>
              </details>
              ` : ''}
            </td>
          </tr>
          `;
        }).join('')}
      </tbody>
    </table>
    ` : '<p>No security hotspots found.</p>'}
  </div>
  
  <div class="footer">
    <p>Report generated from SonarQube scan results on ${new Date().toLocaleDateString()}</p>
  </div>
  
  <script>
    // Tab functionality
    const tabs = document.querySelectorAll('.tab');
    const tabContents = document.querySelectorAll('.tab-content');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        const tabId = tab.getAttribute('data-tab');
        
        // Remove active class from all tabs and contents
        tabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(c => c.classList.remove('active'));
        
        // Add active class to clicked tab and corresponding content
        tab.classList.add('active');
        document.getElementById(tabId).classList.add('active');
      });
    });
  </script>
</body>
</html>
  `;
  
  return html;
}

// Main function
async function main() {
  try {
    console.log('Reading project configuration...');
    const config = readReportTaskFile();
    const { projectKey, serverUrl, dashboardUrl } = config;
    
    if (!projectKey || !serverUrl) {
      throw new Error('Missing project key or server URL in report-task.txt');
    }
    
    console.log(`Fetching vulnerability data for project: ${projectKey}`);
    const vulnerabilities = await fetchVulnerabilities(serverUrl, projectKey);
    
    // Extract rule keys
    const ruleKeys = [
      ...vulnerabilities.issues.map(issue => issue.rule),
      ...vulnerabilities.hotspots.map(hotspot => hotspot.ruleKey)
    ];
    
    console.log('Fetching rule details...');
    const rules = await fetchRuleDetails(serverUrl, ruleKeys);
    
    console.log('Generating HTML report...');
    const html = generateHtmlReport(vulnerabilities, rules, projectKey, dashboardUrl);
    
    fs.writeFileSync(REPORT_PATH, html);
    console.log(`Report generated successfully: ${REPORT_PATH}`);
  } catch (error) {
    console.error(`Error generating report: ${error.message}`);
    process.exit(1);
  }
}

main();